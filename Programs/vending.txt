// Temporary variables
#define input_money x2
// Stored variables
#define money x4
#define refund_mode x5
// Constant variables
#define inputs x6
#define outputs x7
#define vending_item_cost x8
#define nickel_value x9
#define dime_value x10

// -------- Initialization ------------
addi vending_item_cost x0 $30 // vending item cost
addi nickel_value x0 $5 // value of a nickel in storage
addi dime_value x0 $10 // value of a dime in storage
lw inputs x0 $4 // get inputs from memory address 0x4

// ---------- Main Loop ---------------
.main:
// Setup step
addi outputs x0 $0 // clear outputs
andi input_money inputs $15 // get money bits
add money money input_money // add input money to stored money
// Check for refund
bne inputs input_money .refund_set // branch to set refund if user requested a refund (there were bits set other than money inputs)
bne refund_mode x0 .refund_mode // branch to refund if in refund mode
nop // Clock alignment
nop // Clock alignment
nop // Clock alignment
bge money vending_item_cost .vending // branch to vending if money > cost
nop // Clock alignment
nop // Clock alignment
nop // Clock alignment
.disable_refund_mode: // branch back here if money refund is complete
addi refund_mode x0 $0
// Write output, get new input
.write_outputs:
sw outputs x0 $8 // write outputs to memory address 0x8
lw inputs x0 $4 // read inputs from memory address 0x4
jal x0 .main // jump to the beginning of the loop

// --------- Vending Branch ------------
.vending: // Jumps here if user has enough money for vending
addi outputs x0 $16 // set vend output bit to 1
sub money money vending_item_cost // charge cost when vending
addi refund_mode x0 $1 // enter refund mode next clock cycle
jal x0 .write_outputs // go back to main loop

// --------- Refund Branches -----------
.refund_set: // Jumps here if user requested a refund
addi refund_mode x0 $1 // set refund mode to true
.refund_mode: // Jumps here if in refund mode
bge money dime_value .refund_dime // If posssible to refund a dime, do so
bge money nickel_value .refund_nickel // Check if possible to refund nickel
nop // Clock alignment
nop // Clock alignment
nop // Clock alignment
nop // Clock alignment
beq money x0 .disable_refund_mode // Branch to disabling refund mode if all money has been refunded
ecall // Money should never be between 0 and 5 (exclusive) or negative, if it is throw an error

.refund_dime: // This branch always refunds a dime, and checks to disable refund mode
or outputs outputs dime_value // Write a dime refund to the vending machine output, preserving the vend bit
sub money money dime_value // Subtract a dime from the stored money on the refund
jal x0 .return_to_main_write

.refund_nickel: // This branch always refunds a nickel, and checks to disable refund mode
or outputs outputs nickel_value // Write a nickel refund to the vending machine output, preserving the vend bit
sub money money nickel_value // Subtract a nickel from the stored money on the refund
.return_to_main_write:
nop // Clock alignment
nop // Clock alignment
beq money x0 .disable_refund_mode // Branch to disabling refund mode if all money has been refunded
jal x0 .write_outputs // Money hasn't been fully refunded, don't disable refund mode
